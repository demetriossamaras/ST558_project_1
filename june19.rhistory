library(tidyverse)
library(ggplot2)
install.packages(jsonlite)
install.packages("jsonlite")
library(jsonlite)
install.packages("httr")
library(httr)
library(jsonlite)
## creates an object news that is the response from the news api with articles about Ukraine
news <- GET("https://newsapi.org/v2/everything?q=ukraine&from=2023-05-05&sortBy=publishedAt&apiKey=bd2da43dfb254440b25b238a9669cc9e")
news
library(tidyverse)
library(jsonlite)
library(httr)
library(ggplot2)
install.packages("httr")
install.packages("httr")
install.packages("httr")
library(tidyverse)
library(jsonlite)
library(httr)
library(ggplot2)
ticker <- GET(https://api.polygon.io/v2/aggs/ticker/BA/range/1/day/2023-01-09/2023-01-09?adjusted=true&sort=asc&limit=120&apiKey=DrI5M1TDWji8nJS9aZDfUAdR_6iqhFzm)
ticker <- GET("https://api.polygon.io/v2/aggs/ticker/BA/range/1/day/2023-01-09/2023-01-09?adjusted=true&sort=asc&limit=120&apiKey=DrI5M1TDWji8nJS9aZDfUAdR_6iqhFzm")
ticker
ticker <- function(ticker){
response <-GET("https://api.polygon.io/v2/aggs/ticker/BA/range/1/day/2023-01-09/2023-01-09?adjusted=true&sort=asc&limit=120&apiKey=DrI5M1TDWji8nJS9aZDfUAdR_6iqhFzm")
response
}
help("rep)
""
x <- rep(.6)
times=5
x <- rep(.6 times = 4)
x <- rep(.6 times = 4)
x <- rep(.6 times = 4`)
x <- rep(.6 times = 6)
x <- rep(0.6, times = 6)
c(x,y)
x <- rep(0.6, times = 6)
y <- c(1,2,3,4,5,6)
matrix()
c(x,y)
x <- rep(0.6, times = 6)
y <- c(1,2,3,4,5,6)
matrix(c(x,y), nrow = 6)
x <- rep(0.6, times = 6)
y <- c(1,2,3,4,5,6)
matrix(c(x,y), ncol = 6)
z <- c("a","b","c","d","e","f")
data.frame(x,y,z)
z <- c("a","b","c","d","e","f")
data.frame(rep=x,num=y,char=z)
list(x,y,z)
list(rep=x,num=y,char=z)
z <- c("a","b","c","d","e","f")
## name columns with =
data1<-data.frame(rep=x,num=y,char=z)
list(rep=x,num=y,char=z, data=data1)
list<-list(rep=x,num=y,char=z, data=data1)
attributes(list)
attributes(iris)
str(list)
library(tidyverse)
as_tibble(list)
list
list
list<-list(rep=x,num=y,char=z, data=data1)
list
as_tibble(list)
list$data
list$num
unlist(list)
help("unlist")
list
list[2]
list[[2]]
list[2][6]
list[4]
list[4][4]
list[[4]]
str(list[[4]])
str(list[4])
list[4,2]
list[2,2]
list[4]
list[4][1,1]
data
data1
data1[1]
data1[1,3]
data1[ , 1]
data1[1 , ]
str(data[ , 1])
data1[1 , ]
str(data1[1 , ])
str(data1[, 1])
str(data1[1 , 1])
str(data1[3,3])
data1[3,3]
data1
data1[3,2]
help("matrix")
x <- rep(0.6, times = 6)
y <- c(1,2,3,4,5,6)
matrix(c(x,y), nrow = 6)
x <- rep(0.6, times = 6)
y <- c(1,2,3,4,5,6)
matrix(c(x,y), nrow = 6, dimnames = (c(1:6), c("first", "second")))
x <- rep(0.6, times = 6)
y <- c(1,2,3,4,5,6)
matrix(c(x,y), nrow = 6, dimnames = (c(1:6), c("first", "second"))
x <- rep(0.6, times = 6)
y <- c(1,2,3,4,5,6)
matrix(c(x,y), nrow = 6, dimnames = ( NULL , c("first", "second"))
x <- rep(0.6, times = 6)
y <- c(1,2,3,4,5,6)
matrix(c(x,y), nrow = 6, dimnames = list( c(1:6) , c("first", "second"))
x <- rep(0.6, times = 6)
y <- c(1,2,3,4,5,6)
matrix(c(x,y), nrow = 6, dimnames = list( , c("first", "second")))
x <- rep(0.6, times = 6)
y <- c(1,2,3,4,5,6)
matrix(c(x,y), nrow = 6, dimnames = list( c(1:6), c("first", "second")))
list( c(1:6), c("first", "second"))
c(1:6), c("first", "second")
c(1:6) c("first", "second")
c(1:6)
data1
list
list[4]
list[4][1,2]
list[4] %>% [1,2]
list[4]
list$data
list$data[1,]
list$data[1,3]
list$data[[4]][1,3]
list$data[[4]]
list[[4]]
list[[4]][1,3]
list
list<-list(x,y,z, data=data1)
list
list<-list(rep=x,num=y,char=z, data=data1)
as.list(iris)
as.list(iris)[[5]][49]
list1<-list(rep=x,num=y,char=z, data=data1)
list(list1,list1)
list(list1,list1)[[2]]
list1<-list(rep=x,num=y,char=z, data=data1)
list2 <- list(x,y,z,data)
list(list1,list2)
list(list1,list2)
list(list1,list2)[[2]]
list1<-list(rep=x,num=y,char=z, data=data1)
list2 <- list(x,y,z,data1)
list(list1,list2)[[2]]
list(list1,list2)[[1]]
list(list1,list2)[[2]][[2]]
list(list1,list2)[[2]]
list(list1,list2)[[2]][[2]]
list(list1,list2)[[2]][[4]][3,2]
unlist(list(list1,list2))
names(list1)
names(list1) <- c(1:4)
list1
names(iris)
names(iris)[1]
names(iris)[1]<-Sepa;_length
names(iris)[1]<-"Sepal_length"
iris
knitr::opts_chunk
knitr::opts_chunk()
knitr::opts_chunk$set
knitr::opts_chunk$set()
length(iris)
length(iris[2])
iris[2]
length(iris$Sepal.Width)
length(iris[[2]])
length(iris[2])
as.list[iris]
as.list(iris)
iris$Species == virginica
iris$Species == "versicolor"
iris[iris$Species == "versicolor"]
iris[iris$Species == "versicolor", ]
help(filter)
filter(iris, Sepal.Width == 3  )
filter(iris, Sepal.Width = 3  ) ##returns all rows with sepal width = 3
filter(iris, Sepal.Width == 3  ) ##returns all rows with sepal width = 3
filter(iris, Sepal.Width != 3  ) ##returns all rows with sepal width = 3
iris[,1]
as.tibbl(iris)[, 1]
as_tibble(iris)[, 1]
help("arrange")
arrange(iris, Sepal_Length)
iris
arrange(iris, Sepal_length)
arrange(iris, Sepal_length, Sepal.Width)
arrange(iris, Sepal_length, Species0
arrange(iris, Sepal_length, Species)
rename(iris, "Sepal_length" = "Sepal.Length" )
names(iris)
rename(iris, "Sepal_length" = "Sepal.Length")
rename(iris, "Sepal_length" = Sepal.Length)
rename(iris, "Sepal.Length" = Sepal_length )
rename(iris, "length" = iris[1])
rename(iris, "length" = iris[1])
help("mutate")
mutate(iris, c(1:150))
mutate(iris, nums==c(1:150))
mutate(iris, nums=c(1:150))
iris$next<-(rep(a,150))
iris$n <- (rep(a,150))
iris$n <- (rep("a",150))
iris
iris$weight <- (rep("a",150))
iris
iris%>%groupby(Sepal.Width)
iris %>% group_by(Sepal.Width)
iris %>% select(Sepal.Width) %>% mutate(cume = cumsum())
iris %>% select(Sepal.Width) %>% mutate(cume = cumsum(Sepal.Width))
mean(c(TRUE, TRUE, FALSE, FALSE, TRUE, TRUE, FALSE))
5/7
4/7
set.seed(13)
x<-runif(10)
mean(standardize(x))
library(tidyverse)
library(standardize)
install.packages(standardize)
help("return")
help("cor")
help("cat")
iris %>% group_by(Species) %>% summarise(mean1=mean(Sepal_length), mean2= mean(Sepal.Width))
iris
`glue`<- function(a,b){ cbind(a,b)}
cbind( "8", "to")
help("cbind")
8 glue to
8 glue "to"
"8" glue "to"
`glue`(8,"to")
8 %glue% "to"
rm(glue)
`%glue%` <- function (a,b){cbind(first=a, second=b)}
8 %glue% "to"
help("levels")
help("as_factor")
help("ordered")
help("inner_join")
getwd()
getwd()
help(render)
## this is a function to contact the API based on the ticker of interest
ticker <- function(ticker){
link
response <-GET("https://api.polygon.io/v2/aggs/ticker/BA/range/1/day/2023-01-09/2023-01-09?adjusted=true&sort=asc&limit=120&apiKey=DrI5M1TDWji8nJS9aZDfUAdR_6iqhFzm")
response
}
response
response <-GET("https://api.polygon.io/v2/aggs/ticker/BA/range/1/day/2023-01-09/2023-01-09?adjusted=true&sort=asc&limit=120&apiKey=DrI5M1TDWji8nJS9aZDfUAdR_6iqhFzm")
library(tidyverse)
library(jsonlite)
library(httr)
library(ggplot2)
## this is a function to contact the API based on the ticker of interest
ticker <- function(ticker){
link
response <-GET("https://api.polygon.io/v2/aggs/ticker/BA/range/1/day/2023-01-09/2023-01-09?adjusted=true&sort=asc&limit=120&apiKey=DrI5M1TDWji8nJS9aZDfUAdR_6iqhFzm")
response
}
response <-GET("https://api.polygon.io/v2/aggs/ticker/BA/range/1/day/2023-01-09/2023-01-09?adjusted=true&sort=asc&limit=120&apiKey=DrI5M1TDWji8nJS9aZDfUAdR_6iqhFzm")
response
install.packages(RSQlite)
install.packages(RSQLite)
install.packages("RSQLite")
response
data <- rawToChar(response)
## this is a function to contact the API based on the ticker of interest
ticker <- function(ticker){
link
response <-GET("https://api.polygon.io/v2/aggs/grouped/locale/us/market/stocks/2023-01-09?adjusted=true&apiKey=DrI5M1TDWji8nJS9aZDfUAdR_6iqhFzm")
response
}
response <-GET("https://api.polygon.io/v2/aggs/grouped/locale/us/market/stocks/2023-01-09?adjusted=true&apiKey=DrI5M1TDWji8nJS9aZDfUAdR_6iqhFzm")
data <- rawToChar(response)
help("rawToChar")
data <- rawToChar(response$headers)
response
levels(response)
names(response)
str(respo)
str(response)
jsondata <- fromJSON(response)
response$headers
response$times
response <-GET("http://www.omdbapi.com/?y=2023apikey=bf40992d")
response
names(response)
response$content
data <- rawToChar(response$content)
jsondata <- fromJSON(response)
data <- rawToChar(response$content)
jsondata <- fromJSON(data)
jsondata
## this is a function to contact the API based on the ticker of interest
<- function(x){
response <-GET("http://www.omdbapi.com/?y=2023&apikey=bf40992d")
data <- rawToChar(response$content)
jsondata <- fromJSON(data)
jsondata
response <-GET("https://api.polygon.io/v2/aggs/grouped/locale/us/market/stocks/2023-01-09?adjusted=true&apiKey=DrI5M1TDWji8nJS9aZDfUAdR_6iqhFzm")
data <- rawToChar(response$content)
jsondata <- fromJSON(data)
jsondata
## this is a function to contact the API based on the ticker of interest
query <- function(x){
response <-GET("https://api.polygon.io/v2/aggs/grouped/locale/us/market/stocks/2023-01-09?adjusted=true&apiKey=DrI5M1TDWji8nJS9aZDfUAdR_6iqhFzm")
data <- rawToChar(response$content)
jsondata <<- fromJSON(data)
}
jsondata
as_tibble(jsondata)
## this is a function to contact the API based on the ticker of interest
query <- function(x){
response <-GET("https://api.polygon.io/v2/aggs/grouped/locale/us/market/stocks/2023-01-09?adjusted=true&apiKey=DrI5M1TDWji8nJS9aZDfUAdR_6iqhFzm")
data <- rawToChar(response$content)
jsondata <- fromJSON(data)
tibbleresults <<- as_tibble(jsondata)
}
## this is a function to contact the API based on the ticker of interest
query <- function(x){
response <-GET("https://api.polygon.io/v2/aggs/grouped/locale/us/market/stocks/2023-01-09?adjusted=true&apiKey=DrI5M1TDWji8nJS9aZDfUAdR_6iqhFzm")
data <- rawToChar(response$content)
jsondata <- fromJSON(data)
tibbleresults <<- as_tibble(jsondata)
}
query("https://api.polygon.io/v2/aggs/grouped/locale/us/market/stocks/2023-01-09?adjusted=true&apiKey=DrI5M1TDWji8nJS9aZDfUAdR_6iqhFzm")
tibbleresults
View(tibbleresults)
query(https://api.polygon.io/v2/aggs/grouped/locale/us/market/stocks/2023-01-09?adjusted=true&apiKey=DrI5M1TDWji8nJS9aZDfUAdR_6iqhFzm)
query("https://api.polygon.io/v2/aggs/grouped/locale/us/market/stocks/2023-01-09?adjusted=true&apiKey=DrI5M1TDWji8nJS9aZDfUAdR_6iqhFzm")
## this is a function to contact the API from a url "https://api.polygon.io/v2/aggs/grouped/locale/us/market/stocks/2023-01-09?adjusted=true&apiKey=DrI5M1TDWji8nJS9aZDfUAdR_6iqhFzm"
query <- function(x){
response <-GET(x)
data <- rawToChar(response$content)
jsondata <- fromJSON(data)
tibbleresults <- as_tibble(jsondata)
tibbleresults
}
query("https://api.polygon.io/v2/aggs/grouped/locale/us/market/stocks/2023-01-09?adjusted=true&apiKey=DrI5M1TDWji8nJS9aZDfUAdR_6iqhFzm")
c(2,3,4)[3]
iris[[2]]
iris
iris[ ,"Sepal.Length"]
iris[ , 2]
iris %>% select(Sepal.Length)
iris %>% select(2)
str((iris %>% select(2))
str((iris %>% select(2)))
str(iris[2])
str(iris[[2])
str(iris[[2]])
str(iris[ , 2])
iristib<- as_tibble(iris)
str(iristib %>% select(2))
centre <- function(x, type) {
switch(type,
mean = mean(x),
median = median(x),
trimmed = mean(x, trim = .1))
}
x<-c(1:6)
centre(x)
centre(x, type = "mean")
y<-list(x,"mean")
centre(y)
x
x <- 1:7
x
centre
y<-list(x,type = "mean")
centre(y)
centre(x, type="mean")
centre(x, 2)
centre(x, 3)
centre(x)
x<- c(1:5, 100)
centre(x,2)
centre(x,1)
centre(x,3)
y<-list(x,2)
centre(y)
tibbleresults
savehistory(file="june19.rhistory")
